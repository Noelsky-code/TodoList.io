{"version":3,"sources":["In.js","Todo.js","List.js","templete.js","App.js","serviceWorker.js","index.js"],"names":["In","InputGroup","Input","type","bsSize","placeholder","value","this","props","onChange","handle","onKeyPress","press","Button","color","size","onClick","click","Component","Todo","className","checked","name","ButtonGroup","align","check","id","delete","List","todos","map","key","Templete","App","state","HandleChange","e","setState","target","concat","_Check","todo","index","findIndex","select","slice","length","_Delete","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e6b958ed.chunk.js","sourcesContent":["import React,{Component} from 'react';\r\nimport {Input,Button,InputGroup,Form} from 'reactstrap';\r\nimport './App.css';\r\nclass In extends Component{\r\n    \r\n    \r\n    render(){\r\n        return(\r\n         \r\n        <InputGroup>\r\n             <Input type=\"text\" bsSize=\"sm\" placeholder=\"입력하세요\" value={this.props.value} onChange={this.props.handle} \r\n             onKeyPress={this.props.press}>\r\n              </Input>\r\n                <Button color=\"success\"size=\"sm\" onClick={this.props.click}>Add</Button>\r\n        </InputGroup>\r\n        \r\n    );\r\n    }\r\n\r\n}\r\n\r\nexport default In;","import React,{Component} from 'react';\r\nimport './Todo.css';\r\nimport {Input,Button,FormGroup,ButtonGroup} from 'reactstrap';\r\n\r\nclass Todo extends Component {\r\n render(){\r\n\r\n    return(\r\n  \r\n        <div className=\"Todo\">\r\n          <div className={this.props.checked? \"Checked\":\"Text\"}>{this.props.name}</div>\r\n         <ButtonGroup className=\"Buttons\">\r\n          <Button align = \"right\" color = \"success\" size =\"sm\" onClick={()=>this.props.check(this.props.id)}>o</Button>\r\n          <Button color =\"danger\" size =\"sm\" onClick={()=>this.props.delete(this.props.id)}>x</Button>\r\n          </ButtonGroup>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Todo;\r\n","import React,{Component} from 'react';\r\nimport './List.css';\r\nimport Todo from './Todo.js'\r\nimport {Input,Button,FormGroup} from 'reactstrap';\r\n\r\nclass List extends Component {\r\n \r\n  render(){\r\n    return(\r\n        <div className=\"Lists\">\r\n          {this.props.todos.map(\r\n            ({id,name,checked}) =>(\r\n               <Todo id={id} key={id} name={name} check={this.props.check} checked={checked}\r\n                 delete={this.props.delete}\r\n               />\r\n                    )\r\n             )\r\n       } </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default List;\r\n","import React,{Component} from 'react';\r\n//import logo from './logo.svg';\r\nimport './templete.css';\r\nimport In from './In';\r\nimport List from './List.js'\r\nimport {Input,Button,FormGroup} from 'reactstrap';\r\n\r\nclass Templete extends Component{\r\n    render(){\r\n        return(\r\n            <main className=\"Templetes\">\r\n                <div className=\"Title\">\r\n                    Todo List\r\n                </div>\r\n                <div className=\"Input\">\r\n                    <In value={this.props.value} handle ={this.props.handle} \r\n                    press={this.props.press} click={this.props.click}/>\r\n                </div>\r\n                <div className=\"List\">\r\n                    <List todos={this.props.todos} check={this.props.check} delete={this.props.delete}/>\r\n                </div>\r\n            </main>\r\n        );\r\n    }\r\n  \r\n}\r\n\r\nexport default Templete;\r\n","import React,{Component} from 'react';\r\nimport Templete from './templete.js'\r\nimport './App.css';\r\nimport {Input,Button,FormGroup} from 'reactstrap';\r\n\r\n\r\nclass App extends Component {\r\nid=1;\r\n\r\nstate={\r\n  name:'',\r\n  todos:[]\r\n}\r\n\r\nHandleChange =(e)=>{\r\n  this.setState({\r\n    name:e.target.value\r\n  })\r\n\r\n}\r\n\r\nonKeyPress = (e) =>{\r\n  e.key==='Enter'&&this.onClick()\r\n}\r\n\r\nonClick=(e)=>{\r\n  this.setState({\r\n    todos:this.state.todos.concat({id:this.id++,name:this.state.name,checked:false})\r\n  })\r\n  this.setState({\r\n    name:''\r\n  })\r\n}\r\n\r\n_Check = (id)=>{\r\n  const todo = this.state.todos;\r\n  const index = todo.findIndex(todo=> todo.id===id);\r\n  const select = todo[index];\r\n\r\n  this.setState({\r\n    todos:[\r\n      ...todo.slice(0,index),\r\n      {\r\n        ...select,\r\n        checked:!select.checked\r\n        \r\n      },\r\n      ...todo.slice(index+1,todo.length)\r\n    ]\r\n  })\r\n  this.setState({\r\n    name:''\r\n  })\r\n}\r\n\r\n_Delete = (id) =>{\r\n  const todos= this.state.todos;\r\n  this.setState({\r\n    todos:todos.filter(todo=> todo.id !== id)\r\n  })\r\n  this.setState({\r\n    name:''\r\n  })\r\n\r\n}\r\n\r\n  render(){\r\n  return (\r\n    <div className=\"App\">\r\n      <Templete value={this.state.name} handle={this.HandleChange} \r\n      press={this.onKeyPress} click={this.onClick} todos={this.state.todos} check={this._Check}\r\n      delete ={this._Delete}>\r\n      </Templete>  \r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}